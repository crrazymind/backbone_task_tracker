{"ts":1341587883850,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\r\n/**\r\n* MODULE DEPENDENCIES\r\n* -------------------------------------------------------------------------------------------------\r\n* include any modules you will use through out the file\r\n**/\r\n\r\nvar express = require('express')\r\n  , less = require('less')\r\n  , connect = require('connect')\r\n  , everyauth = require('everyauth')\r\n  , nconf = require('nconf')\r\n  , Recaptcha = require('recaptcha').Recaptcha;\r\n\r\n\r\n/**\r\n* CONFIGURATION\r\n* -------------------------------------------------------------------------------------------------\r\n* load configuration settings from ENV, then settings.json.  Contains keys for OAuth logins. See \r\n* settings.example.json.  \r\n**/\r\nnconf.env().file({file: 'settings.json'});\r\n\r\n\r\n/**\r\n* EVERYAUTH AUTHENTICATION\r\n* -------------------------------------------------------------------------------------------------\r\n* allows users to log in and register using OAuth services\r\n**/\r\n\r\neveryauth.debug = true;\r\n\r\n// Configure Facebook auth\r\nvar usersById = {},\r\n    nextUserId = 0,\r\n    usersByFacebookId = {},\r\n    usersByTwitId = {},\r\n    usersByLogin = {\r\n        'user@example.com': addUser({ email: 'user@example.com', password: 'azure'})\r\n    };\r\n\r\neveryauth.\r\n    everymodule.\r\n    findUserById(function (id, callback) {\r\n\tcallback(null, usersById[id]);\r\n    });\r\n\r\n\r\n/**\r\n* FACEBOOK AUTHENTICATION\r\n* -------------------------------------------------------------------------------------------------\r\n* uncomment this section if you want to enable facebook authentication.  To use this, you will need\r\n* to get a facebook application Id and Secret, and add those to settings.json.  See:\r\n* http://developers.facebook.com/\r\n**/\r\n\r\n//everyauth.\r\n//    facebook.\r\n//    appId(nconf.get('facebook:applicationId')).\r\n//    appSecret(nconf.get('facebook:applicationSecret')).\r\n//    findOrCreateUser(\r\n//\tfunction(session, accessToken, accessTokenExtra, fbUserMetadata){\r\n//\t    return usersByFacebookId[fbUserMetadata.claimedIdentifier] || \r\n//\t\t(usersByFacebookId[fbUserMetadata.claimedIdentifier] = \r\n//\t\t addUser('facebook', fbUserMetadata));\r\n//\t}).\r\n//    redirectPath('/');\r\n\r\n\r\n/**\r\n* TWITTER AUTHENTICATION\r\n* -------------------------------------------------------------------------------------------------\r\n* uncomment this section if you want to enable twitter authentication.  To use this, you will need\r\n* to get a twitter key and secret, and add those to settings.json.  See:\r\n* https://dev.twitter.com/\r\n**/\r\n\r\n//everyauth\r\n//  .twitter\r\n//    .consumerKey(nconf.get('twitter:consumerKey'))\r\n//    .consumerSecret(nconf.get('twitter:consumerSecret'))\r\n//    .findOrCreateUser( function (sess, accessToken, accessSecret, twitUser) {\r\n//      return usersByTwitId[twitUser.id] || (usersByTwitId[twitUser.id] = addUser('twitter', twitUser));\r\n//    })\r\n//    .redirectPath('/');\r\n\r\n\r\n\r\n/**\r\n* USERNAME & PASSWORD AUTHENTICATION\r\n* -------------------------------------------------------------------------------------------------\r\n* this section provides basic in-memory username and password authentication\r\n**/\r\n\r\neveryauth\r\n  .password\r\n    .loginWith('email')\r\n    .getLoginPath('/login')\r\n    .postLoginPath('/login')\r\n    .loginView('account/login')\r\n    .loginLocals(function(req, res, done) {\r\n        setTimeout(function() {\r\n            done(null, {\r\n                title: 'login.  '\r\n            });\r\n        }, 200);\r\n    })\r\n    .authenticate(function(login, password) {\r\n        var errors = [];\r\n        if(!login) errors.push('Missing login');\r\n        if(!password) errors.push('Missing password');\r\n        if(errors.length) return errors;\r\n        var user = usersByLogin[login];\r\n        if(!user) return ['Login failed'];\r\n        if(user.password !== password) return ['Login failed'];\r\n        return user;\r\n    })\r\n    .getRegisterPath('/register')\r\n    .postRegisterPath('/register')\r\n    .registerView('account/register')\r\n    .registerLocals(function(req, res, done) {\r\n        setTimeout(function() {\r\n            done(null, {\r\n                title: 'Register.  ',\r\n                recaptcha_form: (new Recaptcha(nconf.get('recaptcha:publicKey'), nconf.get('recaptcha:privateKey'))).toHTML()\r\n            });\r\n        }, 200);\r\n    })\r\n    .extractExtraRegistrationParams(function(req) {\r\n        return {\r\n            confirmPassword: req.body.confirmPassword,\r\n            data: {\r\n                remoteip: req.connection.remoteAddress,\r\n                challenge: req.body.recaptcha_challenge_field,\r\n                response: req.body.recaptcha_response_field\r\n            }\r\n        }\r\n    })\r\n    .validateRegistration(function(newUserAttrs, errors) {\r\n        var login = newUserAttrs.login;\r\n        var confirmPassword = newUserAttrs.confirmPassword;\r\n        if(!confirmPassword) errors.push('Missing password confirmation')\r\n        if(newUserAttrs.password != confirmPassword) errors.push('Passwords must match');\r\n        if(usersByLogin[login]) errors.push('Login already taken');\r\n\r\n        // validate the recaptcha \r\n        var recaptcha = new Recaptcha(nconf.get('recaptcha:publicKey'), nconf.get('recaptcha:privateKey'), newUserAttrs.data);\r\n        recaptcha.verify(function(success, error_code) {\r\n            if(!success) {\r\n                errors.push('Invalid recaptcha - please try again');\r\n            }\r\n        });\r\n        return errors;\r\n    })\r\n    .registerUser(function(newUserAttrs) {\r\n        var login = newUserAttrs[this.loginKey()];\r\n        return usersByLogin[login] = addUser(newUserAttrs);\r\n    })\r\n    .loginSuccessRedirect('/')\r\n    .registerSuccessRedirect('/');\r\n\r\n// add a user to the in memory store of users.  If you were looking to use a persistent store, this\r\n// would be the place to start\r\nfunction addUser (source, sourceUser) {\r\n  var user;\r\n  if (arguments.length === 1) { \r\n    user = sourceUser = source;\r\n    user.id = ++nextUserId;\r\n    return usersById[nextUserId] = user;\r\n  } else { // non-password-based\r\n    user = usersById[++nextUserId] = {id: nextUserId};\r\n    user[source] = sourceUser;\r\n  }\r\n  return user;\r\n}\r\n\r\n\r\n\r\n\r\nvar app = module.exports = express.createServer();\r\n\r\n/**\r\n* CONFIGURATION\r\n* -------------------------------------------------------------------------------------------------\r\n* set up view engine (jade), css preprocessor (less), and any custom middleware (errorHandler)\r\n**/\r\n\r\napp.configure(function() {\r\n    app.set('views', __dirname + '/views');\r\n    app.set('view engine', 'jade');\r\n    app.use(express.bodyParser());\r\n    app.use(express.methodOverride());\r\n    app.use(require('./middleware/locals'));\r\n    app.use(express.cookieParser());\r\n    app.use(express.session({ secret: 'azure zomg' }));\r\n    app.use(everyauth.middleware());\r\n    app.use(express.compiler({ src: __dirname + '/public', enable: ['less'] }));\r\n    app.use(connect.static(__dirname + '/public'));\r\n    app.use(app.router);\r\n});\r\n\r\n/**\r\n* ERROR MANAGEMENT\r\n* -------------------------------------------------------------------------------------------------\r\n* error management - instead of using standard express / connect error management, we are going\r\n* to show a custom 404 / 500 error using jade and the middleware errorHandler (see ./middleware/errorHandler.js)\r\n**/\r\nvar errorOptions = { dumpExceptions: true, showStack: true }\r\napp.configure('development', function() { });\r\napp.configure('production', function() {\r\n    errorOptions = {};\r\n});\r\napp.use(require('./middleware/errorHandler')(errorOptions));\r\n\r\n\r\n\r\n/**\r\n* ROUTING\r\n* -------------------------------------------------------------------------------------------------\r\n* include a route file for each major area of functionality in the site\r\n**/\r\n\r\nrequire('./routes/home')(app);\r\nrequire('./routes/account')(app);\r\n\r\n// Global Routes - this should be last!\r\nrequire('./routes/global')(app);\r\n\r\n\r\n\r\n/**\r\n* CHAT / SOCKET.IO \r\n* -------------------------------------------------------------------------------------------------\r\n* this shows a basic example of using socket.io to orchestrate chat\r\n**/\r\n\r\n// socket.io configuration\r\nvar buffer = [];\r\nvar io = require('socket.io').listen(app);\r\n\r\n\r\nio.configure(function() {\r\n    io.set(\"transports\", [\"xhr-polling\"]);\r\n    io.set(\"polling duration\", 100);\r\n});\r\n\r\nio.sockets.on('connection', function(socket) {\r\n    socket.emit('messages', { buffer: buffer });\r\n    socket.on('setname', function(name) {\r\n        socket.set('name', name, function() {\r\n            socket.broadcast.emit('announcement', { announcement: name + ' connected' });\r\n        });\r\n    });\r\n    socket.on('message', function(message) {\r\n        socket.get('name', function(err, name) {\r\n            var msg = { message: [name, message] };\r\n            buffer.push(msg);\r\n            if(buffer.length > 15) buffer.shift();\r\n            socket.broadcast.emit('message', msg);\r\n        })\r\n    });\r\n    socket.on('disconnect', function() {\r\n        socket.get('name', function(err, name) {\r\n            socket.broadcast.emit('announcement', { announcement: name + ' disconnected' });\r\n        })\r\n    })\r\n});\r\n\r\n/**\r\n* RUN\r\n* -------------------------------------------------------------------------------------------------\r\n* this starts up the server on the given port\r\n**/\r\n\r\neveryauth.helpExpress(app);\r\napp.listen(process.env.PORT || 3000);\r\nconsole.log(\"Express server listening on port %d in %s mode\", app.address().port, app.settings.env);\r\n\r\n"]],"start1":0,"start2":0,"length1":0,"length2":9387}]],"length":9387}
